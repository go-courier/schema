/*
Package routes GENERATED BY gengo:operator 
DON'T EDIT THIS FILE
*/
package routes

import (
	net_textproto "net/textproto"

	github_com_go_courier_courier "github.com/go-courier/courier"
	github_com_go_courier_httptransport_httpx "github.com/go-courier/httptransport/httpx"
	github_com_go_courier_httptransport_transformers "github.com/go-courier/httptransport/transformers"
	github_com_go_courier_schema_pkg_jsonschema "github.com/go-courier/schema/pkg/jsonschema"
	github_com_go_courier_schema_pkg_openapi "github.com/go-courier/schema/pkg/openapi"
	github_com_go_courier_schema_pkg_validator "github.com/go-courier/schema/pkg/validator"
)

func (r *Cookie) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	if values := ri.Values("cookie", "token"); len(values) > 0 {
		r.Token = values[0]
	}

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (Cookie) New() github_com_go_courier_courier.Operator {
	return &Cookie{}
}

func (Cookie) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "Cookie",
			Parameters: []*github_com_go_courier_schema_pkg_openapi.Parameter{
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "token",
						In:   "cookie",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "Token",
										},
									},
								}),
							},
						},
					},
				}),
			},
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *Create) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	body := ri.Body()
	if err := (&(github_com_go_courier_httptransport_transformers.TransformerJSON{})).DecodeFrom(ri.Context(), body, &r.Data, net_textproto.MIMEHeader(ri.Header())); err != nil {
		errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("body"))
	}
	body.Close()

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (Create) New() github_com_go_courier_courier.Operator {
	return &Create{}
}

func (Create) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "Create",
			RequestBody: &(github_com_go_courier_schema_pkg_openapi.RequestBody{
				RequestBodyObject: github_com_go_courier_schema_pkg_openapi.RequestBodyObject{
					Required: true,
					WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
						Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
							"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
								MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
									Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
										SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
											AllOf: []*github_com_go_courier_schema_pkg_jsonschema.Schema{
												&(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/schema/testdata/routes.Data"),
													},
												}),
												&(github_com_go_courier_schema_pkg_jsonschema.Schema{
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-field-name": "Data",
														},
													},
												}),
											},
										},
									}),
								},
							}),
						},
					},
				},
			}),
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						201: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/schema/testdata/routes.Data"),
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *DataProvider) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	if values := ri.Values("path", "id"); len(values) > 0 {
		r.ID = values[0]
	}

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (DataProvider) New() github_com_go_courier_courier.Operator {
	return &DataProvider{}
}

func (DataProvider) Path() string {
	return "/:id"
}

func (DataProvider) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "DataProvider",
			Parameters: []*github_com_go_courier_schema_pkg_openapi.Parameter{
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "id",
						In:   "path",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							Required: true,
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
										SchemaValidation: github_com_go_courier_schema_pkg_jsonschema.SchemaValidation{
											MinLength: func(v uint64) *uint64 { return &v }(6),
										},
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "ID",
											"x-tag-validate":  "@string[6,]",
										},
									},
								}),
							},
						},
					},
				}),
			},
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						200: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/schema/testdata/routes.Data"),
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *DownloadFile) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (DownloadFile) New() github_com_go_courier_courier.Operator {
	return &DownloadFile{}
}

func (DownloadFile) Path() string {
	return "/files"
}

func (DownloadFile) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "DownloadFile",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						200: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/octet-stream": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/httptransport/httpx.Attachment"),
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *FormMultipartWithFile) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	body := ri.Body()
	if err := (&(github_com_go_courier_httptransport_transformers.TransformerMultipart{
		FlattenParams: &(github_com_go_courier_httptransport_transformers.FlattenParams{
			Parameters: []github_com_go_courier_httptransport_transformers.RequestParameter{
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "string",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name": "string,omitempty",
						},
						Loc: []int{
							0,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "string",
						CommonTransformOption: github_com_go_courier_httptransport_transformers.CommonTransformOption{
							Omitempty: true,
						},
					},
					Transformer: nil,
					Validator:   nil,
				},
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "slice",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name": "slice,omitempty",
						},
						Loc: []int{
							1,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "slice",
						CommonTransformOption: github_com_go_courier_httptransport_transformers.CommonTransformOption{
							Omitempty: true,
							Explode:   true,
						},
					},
					Transformer: nil,
					Validator:   nil,
				},
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "data",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name": "data,omitempty",
						},
						Loc: []int{
							2,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "data",
						CommonTransformOption: github_com_go_courier_httptransport_transformers.CommonTransformOption{
							Omitempty: true,
						},
					},
					Transformer: nil,
					Validator:   nil,
				},
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "file",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name":     "file",
							"validate": "-",
						},
						Loc: []int{
							3,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "file",
					},
					Transformer: nil,
					Validator:   nil,
				},
			},
		}),
	})).DecodeFrom(ri.Context(), body, &r.FormData, net_textproto.MIMEHeader(ri.Header())); err != nil {
		errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("body"))
	}
	body.Close()

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (FormMultipartWithFile) New() github_com_go_courier_courier.Operator {
	return &FormMultipartWithFile{}
}

func (FormMultipartWithFile) Path() string {
	return "/multipart"
}

func (FormMultipartWithFile) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "FormMultipartWithFile",
			RequestBody: &(github_com_go_courier_schema_pkg_openapi.RequestBody{
				RequestBodyObject: github_com_go_courier_schema_pkg_openapi.RequestBodyObject{
					Required: true,
					WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
						Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
							"multipart/form-data": &(github_com_go_courier_schema_pkg_openapi.MediaType{
								MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
									Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
										SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
											Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
												"object",
											},
											Properties: map[string]*github_com_go_courier_schema_pkg_jsonschema.Schema{
												"data": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														AllOf: []*github_com_go_courier_schema_pkg_jsonschema.Schema{
															&(github_com_go_courier_schema_pkg_jsonschema.Schema{
																Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
																	Refer: ref("github.com/go-courier/schema/testdata/routes.Data"),
																},
															}),
															&(github_com_go_courier_schema_pkg_jsonschema.Schema{
																VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
																	Extensions: map[string]interface{}{
																		"x-go-field-name": "Data",
																	},
																},
															}),
														},
													},
												}),
												"file": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														AllOf: []*github_com_go_courier_schema_pkg_jsonschema.Schema{
															&(github_com_go_courier_schema_pkg_jsonschema.Schema{
																Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
																	Refer: ref("mime/multipart.FileHeader"),
																},
																VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
																	Extensions: map[string]interface{}{
																		"x-go-star-level": 1,
																	},
																},
															}),
															&(github_com_go_courier_schema_pkg_jsonschema.Schema{
																VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
																	Extensions: map[string]interface{}{
																		"x-go-field-name": "File",
																	},
																},
															}),
														},
													},
												}),
												"slice": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
															"array",
														},
														Items: &(github_com_go_courier_schema_pkg_jsonschema.SchemaOrArray{
															Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
																SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
																	Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
																		"string",
																	},
																},
															}),
														}),
													},
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-field-name": "Slice",
														},
													},
												}),
												"string": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
															"string",
														},
														Deprecated: true,
													},
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-field-name": "String",
														},
													},
												}),
											},
											SchemaValidation: github_com_go_courier_schema_pkg_jsonschema.SchemaValidation{
												Required: []string{
													"file",
												},
											},
										},
										VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
											Extensions: map[string]interface{}{
												"x-go-field-name": "FormData",
											},
										},
									}),
								},
							}),
						},
					},
				},
			}),
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *FormMultipartWithFiles) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	body := ri.Body()
	if err := (&(github_com_go_courier_httptransport_transformers.TransformerMultipart{
		FlattenParams: &(github_com_go_courier_httptransport_transformers.FlattenParams{
			Parameters: []github_com_go_courier_httptransport_transformers.RequestParameter{
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "files",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name":     "files",
							"validate": "-",
						},
						Loc: []int{
							0,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "files",
						CommonTransformOption: github_com_go_courier_httptransport_transformers.CommonTransformOption{
							Explode: true,
						},
					},
					Transformer: nil,
					Validator:   nil,
				},
			},
		}),
	})).DecodeFrom(ri.Context(), body, &r.FormData, net_textproto.MIMEHeader(ri.Header())); err != nil {
		errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("body"))
	}
	body.Close()

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (FormMultipartWithFiles) New() github_com_go_courier_courier.Operator {
	return &FormMultipartWithFiles{}
}

func (FormMultipartWithFiles) Path() string {
	return "/multipart-with-files"
}

func (FormMultipartWithFiles) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "FormMultipartWithFiles",
			RequestBody: &(github_com_go_courier_schema_pkg_openapi.RequestBody{
				RequestBodyObject: github_com_go_courier_schema_pkg_openapi.RequestBodyObject{
					Required: true,
					WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
						Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
							"multipart/form-data": &(github_com_go_courier_schema_pkg_openapi.MediaType{
								MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
									Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
										SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
											Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
												"object",
											},
											Properties: map[string]*github_com_go_courier_schema_pkg_jsonschema.Schema{
												"files": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
															"array",
														},
														Items: &(github_com_go_courier_schema_pkg_jsonschema.SchemaOrArray{
															Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
																SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
																	Nullable: true,
																},
																Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
																	Refer: ref("mime/multipart.FileHeader"),
																},
																VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
																	Extensions: map[string]interface{}{
																		"x-go-star-level": 1,
																	},
																},
															}),
														}),
													},
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-field-name": "Files",
														},
													},
												}),
											},
											SchemaValidation: github_com_go_courier_schema_pkg_jsonschema.SchemaValidation{
												Required: []string{
													"files",
												},
											},
										},
										VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
											Extensions: map[string]interface{}{
												"x-go-field-name": "FormData",
											},
										},
									}),
								},
							}),
						},
					},
				},
			}),
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *FormURLEncoded) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	body := ri.Body()
	if err := (&(github_com_go_courier_httptransport_transformers.TransformerURLEncoded{
		FlattenParams: &(github_com_go_courier_httptransport_transformers.FlattenParams{
			Parameters: []github_com_go_courier_httptransport_transformers.RequestParameter{
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "string",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name": "string",
						},
						Loc: []int{
							0,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "string",
					},
					Transformer: nil,
					Validator:   nil,
				},
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "slice",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name": "slice",
						},
						Loc: []int{
							1,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "slice",
						CommonTransformOption: github_com_go_courier_httptransport_transformers.CommonTransformOption{
							Explode: true,
						},
					},
					Transformer: nil,
					Validator:   nil,
				},
				github_com_go_courier_httptransport_transformers.RequestParameter{
					Parameter: github_com_go_courier_httptransport_transformers.Parameter{
						Name:  "data",
						Field: nil,
						Type:  nil,
						Tags: map[string]github_com_go_courier_httptransport_transformers.Tag{
							"name": "data",
						},
						Loc: []int{
							2,
						},
					},
					TransformerOption: github_com_go_courier_httptransport_transformers.TransformerOption{
						Name: "data",
					},
					Transformer: nil,
					Validator:   nil,
				},
			},
		}),
	})).DecodeFrom(ri.Context(), body, &r.FormData, net_textproto.MIMEHeader(ri.Header())); err != nil {
		errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("body"))
	}
	body.Close()

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (FormURLEncoded) New() github_com_go_courier_courier.Operator {
	return &FormURLEncoded{}
}

func (FormURLEncoded) Path() string {
	return "/urlencoded"
}

func (FormURLEncoded) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "FormURLEncoded",
			RequestBody: &(github_com_go_courier_schema_pkg_openapi.RequestBody{
				RequestBodyObject: github_com_go_courier_schema_pkg_openapi.RequestBodyObject{
					Required: true,
					WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
						Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
							"application/x-www-form-urlencoded": &(github_com_go_courier_schema_pkg_openapi.MediaType{
								MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
									Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
										SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
											Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
												"object",
											},
											Properties: map[string]*github_com_go_courier_schema_pkg_jsonschema.Schema{
												"data": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														AllOf: []*github_com_go_courier_schema_pkg_jsonschema.Schema{
															&(github_com_go_courier_schema_pkg_jsonschema.Schema{
																Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
																	Refer: ref("github.com/go-courier/schema/testdata/routes.Data"),
																},
															}),
															&(github_com_go_courier_schema_pkg_jsonschema.Schema{
																VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
																	Extensions: map[string]interface{}{
																		"x-go-field-name": "Data",
																	},
																},
															}),
														},
													},
												}),
												"slice": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
															"array",
														},
														Items: &(github_com_go_courier_schema_pkg_jsonschema.SchemaOrArray{
															Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
																SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
																	Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
																		"string",
																	},
																},
															}),
														}),
													},
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-field-name": "Slice",
														},
													},
												}),
												"string": &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
														Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
															"string",
														},
													},
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-field-name": "String",
														},
													},
												}),
											},
											SchemaValidation: github_com_go_courier_schema_pkg_jsonschema.SchemaValidation{
												Required: []string{
													"string",
													"slice",
													"data",
												},
											},
										},
										VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
											Extensions: map[string]interface{}{
												"x-go-field-name": "FormData",
											},
										},
									}),
								},
							}),
						},
					},
				},
			}),
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *GetByID) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	if values := ri.Values("path", "id"); len(values) > 0 {
		r.ID = values[0]
	}
	if values := ri.Values("query", "protocol"); len(values) > 0 {

		if err := (&(github_com_go_courier_httptransport_transformers.TransformerPlainText{})).DecodeFrom(ri.Context(), github_com_go_courier_httptransport_transformers.NewStringReader(values[0]), &r.Protocol); err != nil {
			errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("query"), "protocol")
		}

	}
	if values := ri.Values("query", "label"); len(values) > 0 {
		r.Label = values
	}
	if values := ri.Values("query", "name"); len(values) > 0 {
		r.Name = values[0]
	}
	if values := ri.Values("query", "ptrString"); len(values) > 0 {

		if err := (&(github_com_go_courier_httptransport_transformers.TransformerPlainText{})).DecodeFrom(ri.Context(), github_com_go_courier_httptransport_transformers.NewStringReader(values[0]), &r.PtrString); err != nil {
			errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("query"), "ptrString")
		}

	}
	if values := ri.Values("header", "Authorization"); len(values) > 0 {
		r.Authorization = values[0]
	}

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (GetByID) New() github_com_go_courier_courier.Operator {
	return &GetByID{}
}

func (GetByID) Path() string {
	return "/:id"
}

func (GetByID) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "GetByID",
			Parameters: []*github_com_go_courier_schema_pkg_openapi.Parameter{
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "Authorization",
						In:   "header",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "Authorization",
										},
									},
								}),
							},
						},
					},
				}),
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "id",
						In:   "path",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							Required: true,
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "ID",
										},
									},
								}),
							},
						},
					},
				}),
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "protocol",
						In:   "query",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										AllOf: []*github_com_go_courier_schema_pkg_jsonschema.Schema{
											&(github_com_go_courier_schema_pkg_jsonschema.Schema{
												Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
													Refer: ref("github.com/go-courier/schema/testdata/a.Protocol"),
												},
											}),
											&(github_com_go_courier_schema_pkg_jsonschema.Schema{
												VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
													Extensions: map[string]interface{}{
														"x-go-field-name": "Protocol",
													},
												},
											}),
										},
									},
								}),
							},
						},
					},
				}),
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "label",
						In:   "query",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"array",
										},
										Items: &(github_com_go_courier_schema_pkg_jsonschema.SchemaOrArray{
											Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
												SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
													Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
														"string",
													},
												},
											}),
										}),
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "Label",
										},
									},
								}),
							},
						},
					},
				}),
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "name",
						In:   "query",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "Name",
										},
									},
								}),
							},
						},
					},
				}),
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "ptrString",
						In:   "query",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
										Nullable: true,
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "PtrString",
											"x-go-star-level": 1,
										},
									},
								}),
							},
						},
					},
				}),
			},
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						200: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/schema/testdata/db.User"),
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *GetByUser) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (GetByUser) New() github_com_go_courier_courier.Operator {
	return &GetByUser{}
}

func (GetByUser) Path() string {
	return "/users"
}

func (GetByUser) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "GetByUser",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *HealthCheck) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	if values := ri.Values("query", "pullPolicy"); len(values) > 0 {

		if err := (&(github_com_go_courier_httptransport_transformers.TransformerPlainText{})).DecodeFrom(ri.Context(), github_com_go_courier_httptransport_transformers.NewStringReader(values[0]), &r.PullPolicy); err != nil {
			errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("query"), "pullPolicy")
		}

	}

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (HealthCheck) New() github_com_go_courier_courier.Operator {
	return &HealthCheck{}
}

func (HealthCheck) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "HealthCheck",
			Parameters: []*github_com_go_courier_schema_pkg_openapi.Parameter{
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "pullPolicy",
						In:   "query",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										AllOf: []*github_com_go_courier_schema_pkg_jsonschema.Schema{
											&(github_com_go_courier_schema_pkg_jsonschema.Schema{
												Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
													Refer: ref("github.com/go-courier/schema/testdata/b.PullPolicy"),
												},
											}),
											&(github_com_go_courier_schema_pkg_jsonschema.Schema{
												VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
													Extensions: map[string]interface{}{
														"x-go-field-name": "PullPolicy",
													},
												},
											}),
										},
									},
								}),
							},
						},
					},
				}),
			},
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *MustValidAccount) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	if values := ri.Values("query", "authorization"); len(values) > 0 {
		r.AuthorizationInQuery = values[0]
	}
	if values := ri.Values("header", "Authorization"); len(values) > 0 {
		r.Authorization = values[0]
	}

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (MustValidAccount) New() github_com_go_courier_courier.Operator {
	return &MustValidAccount{}
}

func (MustValidAccount) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "MustValidAccount",
			Parameters: []*github_com_go_courier_schema_pkg_openapi.Parameter{
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "Authorization",
						In:   "header",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
										Description: "Bearer access_token",
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "Authorization",
										},
									},
								}),
							},
						},
					},
				}),
				&(github_com_go_courier_schema_pkg_openapi.Parameter{
					ParameterObject: github_com_go_courier_schema_pkg_openapi.ParameterObject{
						Name: "authorization",
						In:   "query",
						ParameterCommonObject: github_com_go_courier_schema_pkg_openapi.ParameterCommonObject{
							WithContentOrSchema: github_com_go_courier_schema_pkg_openapi.WithContentOrSchema{
								Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
									SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
										Type: github_com_go_courier_schema_pkg_jsonschema.StringOrArray{
											"string",
										},
										Description: "Bearer access_token in query",
									},
									VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
										Extensions: map[string]interface{}{
											"x-go-field-name": "AuthorizationInQuery",
										},
									},
								}),
							},
						},
					},
				}),
			},
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						200: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-vendor-type": "context.Context",
														},
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *Proxy) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (Proxy) New() github_com_go_courier_courier.Operator {
	return &Proxy{}
}

func (Proxy) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "Proxy",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						200: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/schema/testdata/routes.IpInfo"),
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *ProxyV2) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (ProxyV2) New() github_com_go_courier_courier.Operator {
	return &ProxyV2{}
}

func (ProxyV2) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "ProxyV2",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						200: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/schema/testdata/routes.IpInfo"),
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *Redirect) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (Redirect) New() github_com_go_courier_courier.Operator {
	return &Redirect{}
}

func (Redirect) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "Redirect",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						302: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "Found",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *RedirectWhenError) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (RedirectWhenError) New() github_com_go_courier_courier.Operator {
	return &RedirectWhenError{}
}

func (RedirectWhenError) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "RedirectWhenError",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
					},
				},
			},
		},
	})
}
func (r *RemoveByID) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (RemoveByID) New() github_com_go_courier_courier.Operator {
	return &RemoveByID{}
}

func (RemoveByID) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "RemoveByID",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
						500: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/statuserror.StatusErr"),
													},
												}),
											},
										}),
									},
								},
							},
							SpecExtensions: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
								Extensions: map[string]interface{}{
									"x-status-errors": []string{
										"@StatusErr[InternalServerX][500000000][InternalServerX]",
										"@StatusErr[][500000000][]",
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *ShowImage) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	return nil
}
func (ShowImage) New() github_com_go_courier_courier.Operator {
	return &ShowImage{}
}

func (ShowImage) Path() string {
	return "/images"
}

func (ShowImage) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "ShowImage",
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						200: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "-",
								WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
									Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
										"image/png": &(github_com_go_courier_schema_pkg_openapi.MediaType{
											MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
												Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/httptransport/httpx.ImagePNG"),
													},
												}),
											},
										}),
									},
								},
							},
						}),
					},
				},
			},
		},
	})
}
func (r *UpdateByID) FromRequestInfo(ri github_com_go_courier_httptransport_httpx.RequestInfo) error {
	errSet := github_com_go_courier_schema_pkg_validator.NewErrorSet()
	body := ri.Body()
	if err := (&(github_com_go_courier_httptransport_transformers.TransformerJSON{})).DecodeFrom(ri.Context(), body, &r.Data, net_textproto.MIMEHeader(ri.Header())); err != nil {
		errSet.AddErr(err, github_com_go_courier_schema_pkg_validator.Location("body"))
	}
	body.Close()

	if errSet.Len() == 0 {
		return nil
	}
	return errSet

}
func (UpdateByID) New() github_com_go_courier_courier.Operator {
	return &UpdateByID{}
}

func (UpdateByID) OpenAPIOperation(ref func(t string) github_com_go_courier_schema_pkg_jsonschema.Refer) *github_com_go_courier_schema_pkg_openapi.Operation {
	return &(github_com_go_courier_schema_pkg_openapi.Operation{
		OperationObject: github_com_go_courier_schema_pkg_openapi.OperationObject{
			Tags: []string{
				"demo",
			},
			OperationId: "UpdateByID",
			RequestBody: &(github_com_go_courier_schema_pkg_openapi.RequestBody{
				RequestBodyObject: github_com_go_courier_schema_pkg_openapi.RequestBodyObject{
					Required: true,
					WithContent: github_com_go_courier_schema_pkg_openapi.WithContent{
						Content: map[string]*github_com_go_courier_schema_pkg_openapi.MediaType{
							"application/json": &(github_com_go_courier_schema_pkg_openapi.MediaType{
								MediaTypeObject: github_com_go_courier_schema_pkg_openapi.MediaTypeObject{
									Schema: &(github_com_go_courier_schema_pkg_jsonschema.Schema{
										SchemaBasic: github_com_go_courier_schema_pkg_jsonschema.SchemaBasic{
											AllOf: []*github_com_go_courier_schema_pkg_jsonschema.Schema{
												&(github_com_go_courier_schema_pkg_jsonschema.Schema{
													Reference: github_com_go_courier_schema_pkg_jsonschema.Reference{
														Refer: ref("github.com/go-courier/schema/testdata/routes.Data"),
													},
												}),
												&(github_com_go_courier_schema_pkg_jsonschema.Schema{
													VendorExtensible: github_com_go_courier_schema_pkg_jsonschema.VendorExtensible{
														Extensions: map[string]interface{}{
															"x-go-field-name": "Data",
														},
													},
												}),
											},
										},
									}),
								},
							}),
						},
					},
				},
			}),
			Responses: github_com_go_courier_schema_pkg_openapi.Responses{
				ResponsesObject: github_com_go_courier_schema_pkg_openapi.ResponsesObject{
					Responses: map[int]*github_com_go_courier_schema_pkg_openapi.Response{
						204: &(github_com_go_courier_schema_pkg_openapi.Response{
							ResponseObject: github_com_go_courier_schema_pkg_openapi.ResponseObject{
								Description: "No Content",
							},
						}),
					},
				},
			},
		},
	})
}
